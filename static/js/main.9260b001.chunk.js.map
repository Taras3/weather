{"version":3,"sources":["components/Weather/Weather.jsx","components/Form/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","console","log","temp","react_default","a","createElement","city","country","error","Form","onSubmit","weatherMethod","type","name","placeholder","API_KEY","App","state","undefined","gettingWeather","_callee","e","api_url","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","setState","main","sys","stop","className","components_Form_Form","this","components_Weather_Weather","React","Component","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","document","getElementById"],"mappings":"+PAmBeA,EAjBC,SAACC,GAEb,OADAC,QAAQC,IAAIF,EAAMG,MAEdC,EAAAC,EAAAC,cAAA,WACKN,EAAMO,MACPH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,yBAAiBN,EAAMG,MACvBC,EAAAC,EAAAC,cAAA,sBAAcN,EAAMO,MACpBH,EAAAC,EAAAC,cAAA,qBAAaN,EAAMQ,UAGrBJ,EAAAC,EAAAC,cAAA,SAAIN,EAAMS,SCFPC,EATF,SAACV,GACV,OACII,EAAAC,EAAAC,cAAA,QAAMK,SAAUX,EAAMY,eAClBR,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3CX,EAAAC,EAAAC,cAAA,mCCFNU,EAAU,mCAuDDC,6MAnDdC,MAAQ,CACPf,UAAMgB,EACNZ,UAAMY,EACNX,aAASW,EACTV,WAAOU,KAINC,qDAAiB,SAAAC,EAAOC,GAAP,IAAAf,EAAAgB,EAAAC,EAAA,OAAAC,EAAApB,EAAAqB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAChBP,EAAEQ,mBACIvB,EAAOe,EAAES,OAAOC,SAASzB,KAAK0B,OAFpB,CAAAN,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,EAKMK,MAAK,mDAAAC,OAAoD5B,EAApD,WAAA4B,OAAkEnB,EAAlE,kBALX,cAKVO,EALUI,EAAAS,KAAAT,EAAAE,KAAA,EAMGN,EAAQc,OANX,OAMVb,EANUG,EAAAS,KAQhBE,EAAKC,SAAS,CACZpC,KAAMqB,EAAKgB,KAAKrC,KAChBI,KAAMiB,EAAKV,KACXN,QAASgB,EAAKiB,IAAIjC,QAClBC,WAAOU,IAZOQ,EAAAE,KAAA,iBAehBS,EAAKC,SAAS,CACZpC,UAAMgB,EACNZ,UAAMY,EACNX,aAASW,EACTV,MAAO,wBAnBO,yBAAAkB,EAAAe,SAAArB,oIAyBlB,OAEMjB,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,OACbvC,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACsC,EAAD,CAAMhC,cAAeiC,KAAKzB,iBAC1BhB,EAAAC,EAAAC,cAACwC,EAAD,CACE3C,KAAM0C,KAAK3B,MAAMf,KACjBI,KAAMsC,KAAK3B,MAAMX,KACjBC,QAASqC,KAAK3B,MAAMV,QACpBC,MAAOoC,KAAK3B,MAAMT,gBA5CZsC,IAAMC,WCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAA9B,EAAA,GAAA+B,KAAAD,EAAAE,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAA8CD,EAA9CC,OAAQC,EAAsCF,EAAtCE,OAAQC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,OAAQC,EAAcL,EAAdK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCDdW,IAASC,OACP1D,EAAAC,EAAAC,cAACF,EAAAC,EAAM0D,WAAP,KACE3D,EAAAC,EAAAC,cAAC0D,EAAD,OAEFC,SAASC,eAAe,SAM1BjB","file":"static/js/main.9260b001.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    console.log(props.temp);\r\n    return (\r\n        <div>\r\n            {props.city && \r\n            <div>\r\n              <p>Temperature: {props.temp}</p>\r\n              <p>Location: {props.city}</p>\r\n              <p>Country: {props.country}</p>\r\n            </div>\r\n            }\r\n            <p>{props.error}</p>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <form onSubmit={props.weatherMethod}>\r\n            <input type=\"text\" name=\"city\" placeholder='city'/>\r\n            <button>get the weather</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\nimport Weather from './components/Weather/Weather';\nimport Form from './components/Form/Form';\n\nconst API_KEY = '4ab60682cd93dae978996a066ef729ac';\n\nclass App extends React.Component {\n\n state = {\n  temp: undefined,\n  city: undefined,\n  country: undefined,\n  error: undefined\n}\n\n\n   gettingWeather = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    if(city){\n    const api_url = await fetch(`https:api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`);\n    const data = await api_url.json();\n\n    this.setState({\n      temp: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      error: undefined\n    })\n  } else {\n    this.setState({\n      temp: undefined,\n      city: undefined,\n      country: undefined,\n      error: \"Enter the city name\"\n    })\n  }\n  }\n  render(){\n\n  return (\n      \n        <div className='app'>\n          <h1>Weather</h1>\n          <Form weatherMethod={this.gettingWeather} />\n          <Weather \n            temp={this.state.temp}\n            city={this.state.city}\n            country={this.state.country}\n            error={this.state.error}\n          />\n        </div>\n      \n \n  )\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}